from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup
from config import *
import data
from threading import Thread
import sqlite3
import YaGPT
persons = ["–ú–∞–¥–∞–º –ê–≤—Ä–æ—Ä–∞", "–ö–∞–ø–∏—Ç–∞–Ω –ö—Ä–∞–∫–µ–Ω", "–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –ó–∞—Ä–∏—è", "–ú–∞—Å—Ç–µ—Ä –¢–∞–π", "–ú–æ–µ –∏–º—è", "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, —Å–µ–π—á–∞—Å –Ω–∞–ø–∏—à—É"]
location = ["–ó–∞—Ç–µ—Ä—è–Ω–Ω—ã–π –≥–æ—Ä–æ–¥", "–û—Å—Ç—Ä–æ–≤ –ó–∞–±—ã—Ç—ã—Ö –î—É—à", "–ü–æ–¥–∑–µ–º–µ–ª—å–µ –í—Ä–µ–º–µ–Ω", "–ú–æ—Å–∫–≤–∞"]
bot = TeleBot(TOKEN)
users = {}

"""
–í–ê–†–ò–ê–ù–¢ –î–û–°–¢–û–ô–ù–´–ô –§–ò–ù–ê–õ–¨–ù–û–ì–û –ü–†–û–ï–ö–¢–ê!!!
"""
def create_keyboard(buttons_list):
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*buttons_list)
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    t2 = Thread(target=data.prepare_database())
    t1 = Thread(target=data.prepare_second_database())
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    user_name = message.from_user.first_name
    bot.send_message(message.chat.id,
                     text=f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—éüêç!"
                          f"–Ø —Ä–∞–±–æ—Ç–∞—é –±–æ–∫ –æ –±–æ–∫ —Å YaGPTü§ñüëæ. –£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!)"
                        "–ï—Å–ª–∏ –≤—ã –Ω–∞–º–µ—Ä–µ–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç - /stop",
                     reply_markup=create_keyboard(["/new_history", '/help']))

@bot.message_handler(commands=["help"])
def help(message):
    bot.send_message(message.chat.id, "—Ç—É—Ç –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")

@bot.message_handler(commands=["new_history"])
def complexity(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä):\n/fantasy - —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞\n/comedy - –∫–æ–º–µ–¥–∏—è\n/novel - —Ä–æ–º–∞–Ω.", reply_markup=create_keyboard(["/fantasy", "/comedy", "/novel"]))

@bot.message_handler(commands=["stop"])
def stop(message):
    give_end_prompt_get_answer(message)

@bot.message_handler(commands=["fantasy"])
def fantasy(message):
    t2 = Thread(target=data.add_gener(id=message.chat.id, genre='—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'))
    t1 = Thread(target=ask_about_name(message))
    t1.start()
    t2.start()
    t1.join()
    t2.join()

@bot.message_handler(commands=["comedy"])
def comedy(message):
    t2 = Thread(target=ask_about_name(message))
    t1 = Thread(target=data.add_gener(id=message.chat.id, genre='–∫–æ–º–µ–¥–∏—è'))
    t1.start()
    t2.start()
    t1.join()
    t2.join()

@bot.message_handler(commands=["novel"])
def novel(message):
    t2 = Thread(target=ask_about_name(message))
    t1 = Thread(target=data.add_gener(id=message.chat.id, genre='—Ä–æ–º–∞–Ω'))
    t1.start()
    t2.start()
    t1.join()
    t2.join()

def ask_about_name(message):
    a = data.is_limit_users_in_prompt_table()
    """
    –ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∏—Ö
    """
    if a:
        bot.register_next_step_handler(message, hwo_are_you)
        bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=create_keyboard(
            [persons[0], persons[1], persons[2], persons[3], persons[4], persons[5]]))
    else:
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è –∫—Ç–æ-—Ç–æ –≤–ª–µ–∑ –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–Ω–æ–≥–æ")
        bot.stop_bot()
def hwo_are_you(message):
    if message.text == persons[0]:
        name = persons[0]
        write_name(name, message)
    elif message.text == persons[1]:
        name = persons[1]
        write_name(name, message)
    elif message.text == persons[2]:
        name = persons[2]
        write_name(name, message)
    elif message.text == persons[3]:
        name = persons[3]
        write_name(name, message)
    elif message.text == persons[4]:
        name = message.chat.id
        write_name(name, message)
    elif message.text == persons[5]:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è):")
        bot.register_next_step_handler(message, your_name)
    else:
        bot.send_message(message.chat.id, "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Å–Ω–∞—á–∞–ª–∞ –≤–∏–¥–∏–º–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        delete_story_of_prompt_generation(message)
        bot.register_next_step_handler(message, start)
def your_name(message):
    name = message.text
    data.add_name(id=message.chat.id, name=name)
    location_of_person(message)
def write_name(name, message):
    t2 = Thread(target=location_of_person(message))
    t1 = Thread(target=data.add_name(id=message.chat.id, name=name))
    t1.start()
    t2.start()
    t1.join()
    t2.join()
def location_of_person(message):
    bot.register_next_step_handler(message, place_of_man)
    bot.send_message(message.chat.id, "–í—ã–±–∏—Ä–µ—Ç–µ —Å–µ—Ç—Ç–∏–Ω–≥:", reply_markup=create_keyboard(
        [location[0], location[1], location[2], location[3]]))
def place_of_man(message):
    if message.text == location[0]:
        write_place(message, place=location[0])
    elif message.text == location[1]:
        write_place(message, place=location[1])
    elif message.text == location[2]:
        write_place(message, place=location[2])
    elif message.text == location[3]:
        write_place(message, place=location[3])
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        delete_story_of_prompt_generation(message)
        bot.register_next_step_handler(message, start)
def write_place(message, place):
    do_it = True
    t2 = Thread(target=data.add_place(id=message.chat.id, place=place))
    t1 = Thread(target=create_prompt(message=message, do_it=do_it))
    t1.start()
    t2.start()
    t1.join()
    t2.join()
def create_prompt(message,do_it):
    if do_it:
        what_session(message)
    print(users[message.chat.id])
    if message.chat.id in users:
        if users[message.chat.id] < 3:
            bot.send_message(message.chat.id, "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞, —Å–∫–æ—Ä–æ –≤—ã –µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ!\n –≠—Ç–æ –≤–∞–º –Ω–µ –ñ–ò–í–´–ï –û–ß–ï–†–ï–î–ò –í LM STUDIO!")
            text = preparation_for_generation(id=message.chat.id)
            tokens_of_prompt_or_answer = YaGPT.count_tokens(prompt_or_answer=text)
            t2 = Thread(target=data.start_regestration_for_people(message, text=text, tokens_of_prompt_or_answer=tokens_of_prompt_or_answer, session_ID=users[message.chat.id]))
            t1 = Thread(target=give_prompt_get_answer(message, text))
            t1.start()
            t2.start()
            t1.join()
            t2.join()
def give_prompt_get_answer(message, text):
    answer = YaGPT.ask_gpt(text=text)
    bot.send_message(message.chat.id, answer)
    tokens_of_prompt_or_answer = YaGPT.count_tokens(prompt_or_answer=answer)
    t2 = Thread(target=data.start_regestration_for_assistent(message, text=answer, tokens_of_prompt_or_answer=tokens_of_prompt_or_answer, session_ID=users[message.chat.id]))
    t1 = Thread(target=message_for_start_addition_prompt(message))
    t1.start()
    t2.start()
    t1.join()
    t2.join()
def message_for_start_addition_prompt(message):
    bot.register_next_step_handler(message ,addition_promt)
def addition_promt(message):
    if message.text != "/stop" and message.text != "/clear":
        addition = message.text
        text = preporation_for_addition(addition)
        tokens_of_prompt_or_answer = YaGPT.count_tokens(prompt_or_answer=text)
        t2 = Thread(target=data.start_regestration_for_people(message, text=text, tokens_of_prompt_or_answer=tokens_of_prompt_or_answer, session_ID=users[message.chat.id]))
        t1 = Thread(target=give_prompt_get_answer(message, text))
        t1.start()
        t2.start()
        t1.join()
        t2.join()
def preparation_for_generation(id):
    connection = sqlite3.connect('for_text.db')
    cur = connection.cursor()
    results = cur.execute(f'SELECT name, place, gener FROM promt WHERE id = {id};')
    for res in results:
        name = res[0]
        place = res[1]
        gener = res[2]
    text = f"{SYSTEM_PROMPT}, –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π - {name}, –º–µ—Å—Ç–æ - {place}, –∏—Å—Ç–æ—Ä–∏—è –≤ –∂–∞–Ω—Ä–µ {gener}"
    return text
def preporation_for_addition(addition):
    for_story = ""
    connection = sqlite3.connect('users.db')
    cur = connection.cursor()
    results = cur.execute(f'SELECT content FROM questions WHERE role = "assistent";')
    for res in results:
        for_story += str(res)
    text = f"{CONTINUE_STORY}, –Ω–µ –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–∫–æ–ø–∫–∏ –∏ –Ω–µ –ø–∏—à–∏ –∏—Ö –≤ –æ—Ç–≤–µ—Ç–µ, –≤–æ—Ç –∏—Å—Ç–æ—Ä–∏—è: {str(for_story)}, {addition};"
    return text

def preporation_for_end_generation(message):
    for_story = ()
    connection = sqlite3.connect('users.db')
    cur = connection.cursor()
    results = cur.execute(f'SELECT content FROM questions WHERE user_id = {message.chat.id} and role = "assistent";')
    for res in results:
        for_story += res
    text = f"{END_STORY}, –≤–æ—Ç –∏—Å—Ç–æ–∏—è –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å, –Ω–µ –æ–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–∫–æ–±–∫–∏ –∏ –Ω–µ –ø–∏—à–∏ –∏—Ö –≤ –æ—Ç–≤–µ—Ç–µ: {for_story}"
    tokens_of_prompt_or_answer = YaGPT.count_tokens(prompt_or_answer=text)
    data.start_regestration_for_people(message, text=text, tokens_of_prompt_or_answer=tokens_of_prompt_or_answer,
                                          session_ID=users[message.chat.id])
    return text
def give_end_prompt_get_answer(message):
    text = preporation_for_end_generation(message=message)
    answer = YaGPT.ask_gpt(text=text)
    bot.send_message(message.chat.id, answer)
    tokens_of_prompt_or_answer = YaGPT.count_tokens(prompt_or_answer=answer)
    data.start_regestration_for_assistent(message, text=answer, tokens_of_prompt_or_answer=tokens_of_prompt_or_answer, session_ID=users[message.chat.id])
    delete_story_of_prompt_generation(message)
def delete_story_of_prompt_generation(message):
    connection = sqlite3.connect('for_text.db')
    cur = connection.cursor()
    cur.execute(f"DELETE FROM promt WHERE id = {message.chat.id}")
    connection.commit()
    connection.close()
def session_id(message):
    connection = sqlite3.connect('users.db')
    cur = connection.cursor()
    session = cur.execute(f"SELECT session_ID FROM questions WHERE user_id = {message.chat.id}")
    for i in session:
        what = i[-1]
        return int(what)

def what_session(message):
    session_if_start = 0
    what = session_id(message)
    if what is not None:
        if users[message.chat.id] == 2:
            bot.send_message(message.chat.id,
                             "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª–∏–±–æ –¥–≤–µ —Å–µ—Å—Å–∏–∏ –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –±–æ—Ç–∞ :(")
            users[message.chat.id] = 3
            block(message=message)
        elif users[message.chat.id] == 1:
            bot.send_message(message.chat.id, "–≠—Ç–æ –≤–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è! –£–¥–∞—á–∫–∏)")
            session_ID = 2
            users[message.chat.id] = 2
            return session_ID
        else:
            bot.send_message(message.chat.id,
                             "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª–∏–±–æ –¥–≤–µ —Å–µ—Å—Å–∏–∏ –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –±–æ—Ç–∞ :(")
            users[message.chat.id] = 3
            block(message)
    else:
        users[message.chat.id] = session_if_start + 1
        session_ID = session_if_start + 1
        return session_ID

def block(message):
    pass

bot.polling()

